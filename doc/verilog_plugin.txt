*verilog_plugin.txt*    Notes for verilog coding

Author:         Weiwei
Licence:        
Homepage:       
Version:        0.1

==============================================================================
Contents                                            *verilog_plugin*

  1. Intro ........................... |verilog_plugin-intro|
  2. Cheatsheet ...................... |verilog_plugin-cheatsheet|
    2.1. Auto-mode...................  |verilog_plugin-cheatautomode|

==============================================================================
1. Intro                                           *verilog_plugin-intro*

Verilog plugin for myself.


==============================================================================
2. Cheatsheet                                      *verilog_plugin-cheatsheet*

------------------------------------------------------------------------------
2.1. Auto mode                                  *verilog_plugin-cheat-automode*

2.1.1. Local Variables

>
  ///////////////////////////////////////////////////////////////////////////
  // Local Variables:
  // verilog-library-flags:\(\"-y ./ \"\)
  // verilog-auto-inst-param-value:t
  // verilog-auto-star-save: f
  // eval:(verilog-read-defines)
  // eval:(verilog-read-includes)
  // End:
  ///////////////////////////////////////////////////////////////////////////
<

------------------------------------------------------------------------------
2.1.2 Ignore in auto-output                    *verilog_plugin-cheat-ignoreout*

* Method 1: Using auto_lisp. (limit 3000 characters)
>
  /*AUTO_LISP(setq verilog-auto-output-ignore-regexp
              (verilog-regexp-words `(
                "q_single_reg_rddata_30" 
          )))*/
<

* Method 2: using Local variables
>
  /*
     Local Variables:
     verilog-auto-output-ignore-regexp: "" 
     eval:(setq verilog-auto-output-ignore-regexp (concat
     "^\\(" 
     "signal1_.*" 
     "\\|signal2_.*" 
     "\\)$" 
     )))
     End:
  */
<

* Method 3: Define in a NEVER defined keyword
>
  `ifdef NEVER
          output a_out;   // Fake out Verilog-mode
          output b_out;   // Fake out Verilog-mode
  `endif
<

------------------------------------------------------------------------------
2.1.3 special variables                            *verilog_plugin-special-var*

There are special variables defined that are useful in these Lisp functions:
>
	vl-name        Name portion of the input/output port.
	vl-bits        Bus bits portion of the input/output port (`[2:0]').
	vl-mbits       Multidimensional array bits for port (`[2:0][3:0]').
	vl-width       Width of the input/output port (`3' for [2:0]).
                       May be a (...) expression if bits isn't a constant.
	vl-dir         Direction of the pin input/output/inout/interface.
	vl-modport     The modport, if an interface with a modport.
	vl-cell-type   Module name/type of the cell (`InstModule').
	vl-cell-name   Instance name of the cell (`instName').
<

Examples:

1. Use substring and vl-cell-name for port names.
>
  /* InstModule AUTO_TEMPLATE (
       .a(@"(substring vl-cell-name 2)"_in[]),
       .b(@"(substring vl-cell-name 2)"_out[])
       );*/

  InstModule u_a0 (/*AUTOINST*/
     // Inouts
     .a    (a0_in[bitsa:0]),     // Templated
     .b    (a0_out[bitsb:0]));     // Templated
<

2. Add `_i` and `_o` for in/out ports.
>
  /*test_mod auto_template(
      .\(.*\) (@"(if (equal vl-dir \\"output\\")  \\"\1_o[]\\" \\"\1_i[]\\" )"),
  );*/
  test_mod u_test_mod(/*autoinst*/);
<

